
#define BLYNK_TEMPLATE_ID "TMPL6-5IrrsLx"
#define BLYNK_TEMPLATE_NAME "IED Bot"
#define BLYNK_AUTH_TOKEN "SMfrtqI6O-jD0y08SDuoeONm33biiq_g"
#define BLYNK_PRINT Serial
#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>

// Define motor control pins
#define L_motor_fw_pin 3  // Left motor forward
#define L_motor_bw_pin 5  // Left motor backward
#define R_motor_fw_pin 6  // Right motor forward
#define R_motor_bw_pin 9  // Right motor backward

// Variables for Blynk joystick and slider
int x = 50;
int y = 50;
int Speed;

char auth[] = "SMfrtqI6O-jD0y08SDuoeONm33biiq_g"; //Enter your Blynk auth token
char ssid[] = "Zeliks"; //Enter your WiFi name
char pass[] = "ngag1300"; //Enter your WiFi password

void setup() {
  Serial.begin(9600);
  
  // Set motor pins as output
  pinMode(L_motor_fw_pin, OUTPUT);
  pinMode(L_motor_bw_pin, OUTPUT);
  pinMode(R_motor_fw_pin, OUTPUT);
  pinMode(R_motor_bw_pin, OUTPUT);

  // Initialize Blynk
  Blynk.begin(auth, ssid, pass, "blynk.cloud", 80);
}

// Get joystick values from Blynk app
BLYNK_WRITE(V0) { x = param[0].asInt(); }
BLYNK_WRITE(V1) { y = param[0].asInt(); }

// Check joystick values and control motors
void smartcar() {
  if (y > 70) {
    carForward();
    Serial.println("Moving Forward");
  } else if (y < 30) {
    carBackward();
    Serial.println("Moving Backward");
  } else if (x < 30) {
    carLeft();
    Serial.println("Turning Left");
  } else if (x > 70) {
    carRight();
    Serial.println("Turning Right");
  } else {
    carStop();
    Serial.println("Stopping");
  }
}

void loop() {
  Blynk.run(); // Run Blynk
  smartcar();  // Run motor control logic
}

// Motor control functions
void carForward() {
  digitalWrite(L_motor_fw_pin, HIGH);
  digitalWrite(L_motor_bw_pin, LOW);
  digitalWrite(R_motor_fw_pin, HIGH);
  digitalWrite(R_motor_bw_pin, LOW);
}

void carBackward() {
  digitalWrite(L_motor_fw_pin, LOW);
  digitalWrite(L_motor_bw_pin, HIGH);
  digitalWrite(R_motor_fw_pin, LOW);
  digitalWrite(R_motor_bw_pin, HIGH);
}

void carLeft() {
  digitalWrite(L_motor_fw_pin, LOW);
  digitalWrite(L_motor_bw_pin, HIGH);
  digitalWrite(R_motor_fw_pin, HIGH);
  digitalWrite(R_motor_bw_pin, LOW);
}

void carRight() {
  digitalWrite(L_motor_fw_pin, HIGH);
  digitalWrite(L_motor_bw_pin, LOW);
  digitalWrite(R_motor_fw_pin, LOW);
  digitalWrite(R_motor_bw_pin, HIGH);
}

void carStop() {
  digitalWrite(L_motor_fw_pin, LOW);
  digitalWrite(L_motor_bw_pin, LOW);
  digitalWrite(R_motor_fw_pin, LOW);
  digitalWrite(R_motor_bw_pin, LOW);
}
